import can
import os
import csv
from datetime import datetime, timezone
from tkinter import Tk, filedialog

# --- Open file dialog ---
Tk().withdraw()  # Hide root window
blf_file = filedialog.askopenfilename(
    title="Select a .blf file",
    filetypes=[("BLF files", "*.blf")],
)

if not blf_file:
    print("No file selected. Exiting.")
    exit()

# --- Setup output paths ---
input_dir = os.path.dirname(blf_file)
base_name = os.path.splitext(os.path.basename(blf_file))[0]
output_dir = os.path.join(input_dir, base_name)

os.makedirs(output_dir, exist_ok=True)

asc_file = os.path.join(output_dir, base_name + ".asc")
csv_file = os.path.join(output_dir, base_name + ".csv")
trc_file = os.path.join(output_dir, base_name + ".trc")

# --- Conversion ---
reader = can.BLFReader(blf_file)
start_time = None
start_dt = datetime.now()

with open(asc_file, "w") as asc, \
     open(csv_file, "w", newline='') as csv_out, \
     open(trc_file, "w") as trc:

    csv_writer = csv.writer(csv_out)
    csv_writer.writerow(["Timestamp", "CAN_ID", "DLC", "Data"])

    trc.write(";$FILEVERSION=2.1\n")
    trc.write(f";$STARTTIME={datetime.now(timezone.utc).timestamp()}\n")
    trc.write(";$COLUMNS=N,O,T,B,I,d,R,L,D\n;\n")
    trc.write(f";   Start time: {start_dt.strftime('%m/%d/%Y %H:%M:%S.%f')[:-3]}\n")
    trc.write(";   Generated by BLF Converter Script\n")
    trc.write(";-------------------------------------------------------------------------------\n")
    trc.write(";   Bus  Connection   Net Connection           Protocol  Bit rate\n")
    trc.write(";   1    Tractor BUS  TractorCan@pcan_usb      J1939     500 kbit/s\n")
    trc.write(";-------------------------------------------------------------------------------\n")
    trc.write(";   Message    Time    Type    ID     Rx/Tx\n")
    trc.write(";   Number     Offset  |  Bus  [hex]  |  Reserved\n")
    trc.write(";   |          [ms]    |  |    |      |  |  Data Length Code\n")
    trc.write(";   |          |       |  |    |      |  |  |    Data [hex] ...\n")
    trc.write(";   |          |       |  |    |      |  |  |    |\n")
    trc.write(";---+--- ------+------ +- +- --+----- +- +- +--- +- -- -- -- -- -- -- --\n")

    for idx, msg in enumerate(reader, start=1):
        if start_time is None:
            start_time = msg.timestamp

        offset_ms = (msg.timestamp - start_time) * 1000
        can_id = f"{msg.arbitration_id:08X}" if msg.is_extended_id else f"{msg.arbitration_id:03X}"
        data_bytes = ' '.join(f"{b:02X}" for b in msg.data)

        # ASC
        asc.write(f"{msg.timestamp:.6f} ID: {can_id} DLC: {msg.dlc} Data: {data_bytes}\n")

        # CSV
        csv_writer.writerow([f"{msg.timestamp:.6f}", can_id, msg.dlc, data_bytes])

        # TRC
        trc.write(f"{idx:8d} {offset_ms:10.3f} DT 1  {can_id} Rx -  {msg.dlc:<2d}  {data_bytes}\n")

print(f"\nâœ… Converted files saved in:\n{output_dir}")
os.startfile(output_dir)
